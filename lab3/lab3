#include <iostream>

using namespace std;

class Matrix 
{
    int rows;
    int cols;
    int **data;

public:
    Matrix() 
    {
        cout << "Default constructor called" << endl;
        rows = 0;
        cols = 0;
        data = nullptr;
    }

    Matrix(int r, int c) : rows(r), cols(c) 
    {
        cout << "Parameterized constructor called" << endl;
        data = new int*[rows];
        for (int i = 0; i < rows; ++i) 
        {
            data[i] = new int[cols];
            for (int j = 0; j < cols; ++j) 
            {
                data[i][j] = 0;
            }
        }
    }

    Matrix(const Matrix& other) 
    {
        cout << "Copy constructor called" << endl;
        rows = other.rows;
        cols = other.cols;
        data = new int*[rows];
        for (int i = 0; i < rows; ++i) 
        {
            data[i] = new int[cols];
            for (int j = 0; j < cols; ++j) 
            {
                data[i][j] = other.data[i][j];
            }
        }
    }

    Matrix& operator=(const Matrix& other) 
    {
        if (this != &other) 
        {
            cout << "Assignment operator called" << endl;
            for (int i = 0; i < rows; ++i) 
            {
                delete[] data[i];
            }
            delete[] data;
            rows = other.rows;
            cols = other.cols;
            data = new int*[rows];
            for (int i = 0; i < rows; ++i) 
            {
                data[i] = new int[cols];
                for (int j = 0; j < cols; ++j) 
                {
                    data[i][j] = other.data[i][j];
                }
            }
        }
        return *this;
    }

    ~Matrix() 
    {
        cout << "Destructor called" << endl;
        if (data != nullptr) 
        {
            for (int i = 0; i < rows; ++i) 
            {
                delete[] data[i];
            }
            delete[] data;
        }
    }

    int getRows() const { return rows; }
    int getCols() const { return cols; }
    int getElement(int i, int j) const { return data[i][j]; }

    void setElement(int i, int j, int value) { data[i][j] = value; }

    void printMatrix() const 
    {
        for (int i = 0; i < rows; ++i) 
        {
            for (int j = 0; j < cols; ++j) 
            {
                cout << data[i][j] << " ";
            }
            cout << endl;
        }
    }
};

int main() 
{
    const int numMatrices = 3;
    Matrix matrices[numMatrices];

    for (int i = 0; i < numMatrices; ++i) 
    {
        int rows, cols;
        cout << "Enter number of rows and columns for matrix " << i+1 << ": ";
        cin >> rows >> cols;

        matrices[i] = Matrix(rows, cols);

        for (int r = 0; r < rows; ++r) 
        {
            for (int c = 0; c < cols; ++c) 
            {
                int value;
                cout << "Enter element at position (" << r << ", " << c << "): ";
                cin >> value;
                matrices[i].setElement(r, c, value);
            }
        }

        cout << "Matrix " << i+1 << ":\n";
        matrices[i].printMatrix();
    }

    return 0;
}
